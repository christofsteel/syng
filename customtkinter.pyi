from tkinter import Tk
from typing import Any, Callable, Optional

from PIL.Image import Image

class CTk(Tk):
    def __init__(self, parent: Optional[Tk] = None, className: str = "Tk") -> None:
        pass
    def pack(
        self,
        expand: bool = False,
        fill: str = "",
        side: str = "",
        padx: int = 0,
        pady: int = 0,
        ipadx: int = 0,
        ipady: int = 0,
        anchor: str = "",
    ) -> None: ...
    def grid(
        self, column: int, row: int, padx: int = 0, pady: int = 0, sticky: str = ""
    ) -> None: ...
    def configure(self, **kwargs: Any) -> None: ...

class CTkToplevel(CTk): ...
class CTkFrame(CTk): ...

class CTkImage:
    def __init__(self, light_image: Image, size: tuple[int, int]) -> None: ...

class CTkTabview(CTk):
    def __init__(self, parent: Tk, width: int, height: int) -> None: ...
    def add(self, name: str) -> None: ...
    def set(self, name: str) -> None: ...
    def tab(self, name: str) -> CTkFrame: ...

class CTkOptionMenu(CTk):
    def __init__(self, parent: Tk, values: list[str]) -> None: ...
    def set(self, value: str) -> None: ...
    def get(self) -> str: ...

class CTkCheckBox(CTk):
    def __init__(self, parent: Tk, text: str, onvalue: Any, offvalue: Any) -> None: ...
    def select(self) -> None: ...
    def deselect(self) -> None: ...
    def get(self) -> Any: ...

class CTkLabel(CTk):
    def __init__(self, parent: Tk, text: str, justify: str = "") -> None: ...

class CTkTextbox(CTk):
    def __init__(self, parent: Tk, wrap: str = "none", height: int = 1) -> None: ...
    def get(self, start: str, end: str) -> str: ...
    def delete(self, start: str, end: str) -> None: ...
    def insert(self, start: str, value: str) -> None: ...

class CTkScrollableFrame(CTk): ...

class CTkButton(CTk):
    def __init__(
        self,
        parent: Tk,
        text: str,
        command: Callable[..., None],
        width: Optional[int] = None,
    ) -> None: ...
